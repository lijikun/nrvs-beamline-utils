*
************************************************************************
*
*    Standard input file of module PADD
*
************************************************************************
*  
*    Lines which first character is an asterisk (*) are
*    supposed to be comments and can occur anywhere
*    in the input stream.
*
*    Lines which first character is the char. (@)
*    will be interpreted as commands. They must match a
*    simple pattern :
*
*      @ variable_name := string
*    
*    In the following input stream @variable_name will 
*    be substituted by string. variable_name may be up
*    to 8 chars long. Continuation lines are not allowed.
*
*    Every valid input line (begins not with *) looks like
*          <comment> :: <data> :: <comment>
*    or like
*          <comment> :: <data>
*    and <data> is read by PADD with free format.
*
************************************************************************
*
*  general information
*  ===================
*
 (1) operating energy / keV  :: 14.4125
 (2) sample temperature / K  :: 70
*
************************************************************************
*
*  monochromator specific information
*  ==================================
*
*   (4) :  two numbers:
*
*           first number specifies the thermal expansion
*            coefficient for the monochromator crystal material
*
*           optional: second number specifies the thermal expansion
*            coefficient for the analyzer crystal material. If not
*            given it is assumed identical to first number.
*
 (3) lattice constant / Angstroem      ::  5.4310196
 (4) thermal expansion coefficient 1/K ::  2.6D-6
*
*
*   (5&6) :  four numbers;
*
*             first three numbers specify the Miller indices
*              of the monochromator crystal reflections
*
*             optional: fourth number specifies the sense of
*              goniometer rotation for each crystal. If not
*              given value is set to unity.
*
 (5) Miller indices of first reflection; rotation sense  ::  4 0 0  -1
 (6) Miller indices of second reflection; rotation sense :: 10 6 4  1
*
************************************************************************
*
*  output data specific information
*  ================================
*
*   (7) :  four values
*           (1) number that specifies the linear scaling factor
*                 applied to energy axis in ouput data
*           (2) optional:  quadratic energy scale correction
*           (3) optional:  shift of energy axis
*           (4) optional:  character defining interpolation method
*                            b = binning
*                            l = linear interpolation
*                            q = quadratic interpolation (default)
*
*   (8) :  two values
*           (1) prefix to generate file names
*           (2) optional:  g,G = add headers for Grace plotting program
*                          ,   = create comma-separated value files,
*                                  extension 'csv'
*
 (7) scaling factor for energy axis        :: 1
 (8) name of the output file               :: Example :: Comments here.
 (9) comment character used in output file :: #
*
************************************************************************
*
*  Fit of the elastic peak
*  =======================
*
*   (10) :  the elastic peak will be fitted in a range of
*             plus/minus this value
*   (11) :  this is the value of the inelastic contribution
*             under the elastic peak. If a negative value is
*             specified the program will fit the parameter
*   (12) :  the left/right asymmetry of the fitted function
*   (13) :  number or file name, number: determines the
*             shape of the internally generated function that
*             is fit to the elastic peak, value=2 corresponds
*             to a Gaussian, larger values lead to a more
*             rectangular shape. file name: containes data
*             describing the shape of the elastic peak in
*             2-column format, energy range should cover the
*             fitted range, (10).
*
 (10) fit range / meV       :: 2
 (11) inelastic background  :: -1
 (12) asymmetry, left/right :: 1.0
 (13) shape, 2=Gaussian     :: 2
*
************************************************************************
*
*  input data specific information
*  ===============================
*
*   The following type of input files are supported
*
*     (a)  ASCII     (formatted multicolumn Ascii files)
*     (b)  Spec      (formatted files created by SPEC software)
*     (c)  APSmda    (unformatted files created at the APS)
*
*   Other input file types require a plugin to be installed.
*
*
*   Case (a):
*
* (14) type of input file :: ASCII
*
*   Each input file is assumed to consist of a set of columns.
*   The meaning of the columns has to be defined for each input
*   file. Use the following syntax
*   
*     <file name> E<ne> D<nd> t<nt1> T<nt2> N<nn> B<ff>
*
*   All variables starting with 'n' have to refer to an existing
*   column number. The meaning of each column is defined by the
*   character that preceeds the number, the specifier. Use the
*   following table of symbols (note case sensivity)
*
*     E,e  =  energy
*     D,d  =  counts
*     a    =  angle position of first crystal
*     A    =  angle position of second crystal
*     c    =  calibration of first crystal
*     C    =  calibration of second crystal
*     t    =  temperature of first crystal
*     T    =  temperature of second crystal
*     M,m  =  use these data as monitor
*     N,n  =  normalize counts to these data
*     P,p  =  counts of elastic peak spectrum
*     S,s  =  temperature of analyzer crystal
*     B,b  =  constant background for counts
*
*   The following rules apply
*
*     (1)  Unknown specifiers will be ignored, e.g., 'X5'
*           defaults to '5'.
*     (2)  Numbers without defined specifier will be interpreted
*           sequentially according to the table of symbols, e.g.,
*            '2 X7 T9 4' defaults to 'E2 D7 T9 A4'.
*     (3)  The specifiers 't,T,n,N,m,M,s,S,p,P,b,B' are optional.
*     (4)  The specifiers 'E,e' override the specifiers 'a,A', e.g.,
*           '2 X7 T9 4' is equivalent to 'E2 D7 T9'.
*     (5)  The order of numbers with defined specifiers is
*           arbitrary, e.g., 'E2 D7 T9' is equivalent to 'D7 T9 E2'
*
*   File name range expansion is supported, e.g.,
*
*       name.<10-12>.dat ...
*
*    replaces
*
*       name.10.dat ...
*       name.11.dat ...
*       name.12.dat ...
*
*   The minimum of required information is
*   
*     <file name> <ne> <nd>
*
*
* (15.1)  file ::  raw.112.dat        a3 A2  D10 t11 T12 B0.1 m5
* (15.1)  file ::  raw.115.dat        a3 A2  D10 t11 T12 B0.1 m5
* (15.1)  file ::  raw.<118-119>.dat  a3 A2  D10 t11 T12 B0.1 m5
*
************************************************************************
*
*   Case (b):
*
* (14) type of input file :: Spec
*
*   Each SPEC input file is assumed to consist of a set of scans.
*   Each scan is assumed to consist of a set of columns.
*   The meaning of the columns has to be defined for each scan.
*   Use the following syntax
*   
*     <file name> #<scan_no> E<ne> D<nd> t<nt1> T<nt2> N<nn> B<ff>
*
*   Rules were explained above.
*   File name range expansion is supported, e.g.,
*
*       name #10-12  ...
*
*    replaces
*
*       name #10  ...
*       name #11  ...
*       name #12  ...
*
*   The minimum of required information is
*   
*     <file name> #<scan_no> <ne> <nd>
*
*
************************************************************************
*
*   Case (c):
*
  (14) type of input file :: APSmda
*
*   Each binary input file contains data associated with 'positioners'
*   and 'detectors'. These existing positioners and detectors are
*   assigned to column numbers in sequential order. For example,
*   if positioners 1,2 and detectors 5,6,10 exist in the mda file
*   the following map is used.
*
*    positioner 1  =  column 1
*    positioner 2  =  column 2
*    detector  5   =  column 3
*    detector  6   =  column 4
*    detector 10   =  column 5
*
*   The meaning of the columns is defined in the same way as before.
*   Use the following syntax
*   
*     <file name>  E<ne> D<nd> t<nt1> T<nt2> N<nn> B<ff>
*
*   Other rules were explained above.
*   File name range expansion is supported, e.g.,
*
*       name.<10-12>.mda ...
*
*    replaces
*
*       name.10.dat ...
*       name.11.dat ...
*       name.12.dat ...
*
*   The minimum of required information is
*   
*     <file name> <ne> <nd>
* Example Sample
(15.1.)  file ::  scans/scan_00<01-03>.mda a2 A3 d11 t13 T14 n7 
(15.1.)  file ::  scans/scan_0005.mda a2 A3 d11 t13 T14 n7 
*
*
************************************************************************
*
